                      Introduction into application layer
                      ***********************************

Motivation:
===========

There is need to simply change layout of pages, change the place of functions
of serweb on single tabs. If there are for each function some unit (named 
application unit - APU - in next text) we can very simply create new page
containing arbitrary combination of functions. This page is created via one
quite simply php script and one new samrty template.


More description
================

The php scripts mentioned above are located in directories html/admin and
html/user. In this context we can perceive these files as some configuration 
files. These scripts describing which APU may be loaded, set some parameters
and configuration options of the APU and describeing which smarty template may
be used.

APU contain whole logic and functionality of serweb. It takes takes valeus from
user (from http GET and POST params), do SQL queries and updates and the result
store to variables used by smarty template engine. Smarty create from template
and from values of these variables the result html page.

APU are located in directory application layer. Unfortunately there is no 
documentation for the application layer but you can found some description 
in source code of the APU. On the begining of each file is description of 
allowed configuration and exported smarty variables.

The configuration options of APU can be changed be calling method of the APU
set_opt('option_name', <option_value>)


HTML forms
==========

One main thing which APU useing for interaction with user is HTML form. The HTML
form is usualy stored in smarty variable name $form (can be renamed by change
option 'smarty_form' of the APU). This variable is associative array containing
always keys 'start' and 'finish'. 

The variable 'form.start' contain <form ....> tag and variable 'form.finish'
contain </form> tag. Except these keys variable form contain other keys 
which are single <input> (or <select>) tags. The names of these keys depends
on Application Unit.
	
The submit element of the form is always stored in variable 'form.okey'. The
submit element may be <input type="image"> or <input type='submit'> or may
be hidden. If is hidden it has to be called by javascript function. But it
have the advantage in customization. It may be for example image (of button)
which changes on mouse over. For example like this:

	<a href="document.form1.reset();" onmouseover="btnOver();" onmousedown="btnDown();" 
		onmouseup="btnUp();" onmouseout="btnOut();" onfocus="this.blur();">
		<img class="button" src="...." alt="...."></a>

The type of submit button can be changed by option of application unit
'form_submit'. This option is asociative array with following keys:
	['type'] - type of submit element 'hidden', 'button', 'image'
	['text'] - text on button or alt on image
	['src']  - source of image


Shared HTML forms
=================

There is sometime need to share one html form by more APU. For example in the
case when we need run more functions by one click to form submit button. For 
example update user preference and update user details. 

This have to be set up by calling method
$controler->assign_form_name("form_name", APU1);
$controler->assign_form_name("form_name", APU2);

This assigning one form with name "form_name" to two APU: APU1 and APU2;
Also the submit element of shared html form should be set by calling:

$controler->set_submit_for_form("form_name", form_submit);
The form_submit is associative array described above.

The result html form will be stored in smarty variable named "form_name".

For examples see file html/user/my_account.php

notice: if one shared html form is used, you should call $controler->assign_form_name
        for each APU useing html form even if it not sharing their html form with
        other APU



How the page controler process the page
=======================================

Page processing starts by execution of method 'start' of page controller. This
method could first check if logged user have permission to see current page. If
not, it terminate the execution.

After that all APUs are initialized calling their 'init' methods.

The methods 'determine_action' of all APUs are called next. In this stage will 
be determined what each the APU will do. The action could be just display the 
table of values or uodate data in database, etc. Each action have several flags.
The most interesting flag is 'reload' flag, which says that the APU want just
do some action (usualy update data in DB) and than perform reload of page 
(without any HTML output).

The methods 'create_html_form' of all APUs are called next. In this stage each
APU could create its own object holding html form. One html form object could 
be also shared by more APUs (see "Shared HTML forms" section). You could find
detailed description of html forms in documentation to PHPlib.

The method 'validate_form' is called for each APu their action have flag 
'validate_form' set. This method should be called always there are data submited
from form. This method should validate them. 

If there is an invalid value in the form, methods 'form_invalid' of all APUs
are called. Otherwise proper action methods of the APUs are called. If the 'reload'
flag is set for some APU, others APU (without having this flag set) are omited in 
this stage and execution of script ending here.

The methods 'return_messages' of all APUs are called next. If APU wants display 
an info message for user (like 'values saved successfuly', etc.), it should 
return it now.

The methods 'pass_values_to_html' and 'pass_form_to_html' of all APUs are called 
at last. In these methods are all data which should be displayed to user assigned
to smarty variables. These variables are later accesible from smarty engine.

Generation of HTML output starting now. The function print_html_head() is called
first. It generate the "<header>....</header>" part of page. Call of function 
print_html_body_begin() follow. This function could generate an page heading, same
for all pages. This is following by calling of smarty engine which generate whole
page by the appropriate template. Function print_html_body_end() is called on the 
end. It could print an footer (same for all pages).

More information about smarty engine find of its web page: http://smarty.php.net






To update:
* where everywhere are stored APU
